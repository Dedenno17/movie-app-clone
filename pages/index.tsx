import { GetStaticProps, GetStaticPropsResult, NextPage } from 'next';
import Head from 'next/head';
import { ReactNode } from 'react';
import ContentCard from '../src/components/UI/ContentCard';
import popularMoviesInterface from '../src/models/popularMoviesData';
import popularTvSeriesInterface from '../src/models/popularTvSeriesData';

interface HomeProps {
  popularMovies: popularMoviesInterface;
  popularTvSeries: popularTvSeriesInterface;
}

// function to get popular movies
export const getPopularMovies = async (): Promise<
  popularMoviesInterface | any
> => {
  try {
    const res = await fetch(
      'https://api.themoviedb.org/3/movie/popular?api_key=639d75e6b806c03213815ae9aa5a9376&language=en-US&page=1'
    );
    if (!res.ok) {
      throw new Error();
    }
    const data = await res.json();
    return data;
  } catch (err: any) {
    console.log(err.message);
  }
};

// function to get popular Tv series
export const getPopularTvSeries = async (): Promise<
  popularTvSeriesInterface | any
> => {
  try {
    const res = await fetch(
      'https://api.themoviedb.org/3/tv/popular?api_key=639d75e6b806c03213815ae9aa5a9376&language=en-US&page=1'
    );
    if (!res.ok) {
      throw new Error();
    }
    const data = await res.json();
    return data;
  } catch (err: any) {
    console.log(err.message);
  }
};

// prerendered function
export const getStaticProps: GetStaticProps<HomeProps> = async (): Promise<
  GetStaticPropsResult<HomeProps> | any
> => {
  const popularMovies = await getPopularMovies();
  const popularTvSeries = await getPopularTvSeries();

  return {
    props: {
      popularMovies,
      popularTvSeries,
    },
  };
};

const Home: NextPage<HomeProps> = ({ popularMovies, popularTvSeries }) => {
  const filteredPopularMovies = popularMovies.results.slice(0, 12);
  const filteredPopularTvSeries = popularTvSeries.results.slice(0, 12);

  const featuredMovies = popularMovies.results
    .filter((item) => item['vote_average'] > 7)
    .slice(0, 8);
  const featuredTvSeries = popularTvSeries.results
    .filter((item) => item['vote_average'] > 7)
    .slice(0, 8);

  return (
    <div className="w-full p-5">
      <Head>
        <title>FELIX</title>
        <meta
          name="Situs penyedia informasi tentang film dan serial tv
            gratis. Sama seperti penyedia film dan serial tv lainnya seperti
            Netflix, Disney+, HBO, Apple TV+, Amazon Prime Video, dan lainnya."
          content="Generated by create next app"
        />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="w-full border-b-[1px] border-b-secondaryGrey mb-5 pb-3">
        <span className="px-3 py-1 w-full text-xl text-slate-200 border-l-[3px] border-l-primaryRed">
          FEATURED
        </span>
        <ul className="grid grid-cols-3 gap-3 mt-6 md:grid-cols-4 lg:grid-cols-6 lg:gap-7">
          {featuredMovies &&
            featuredMovies.map(
              (item): ReactNode => (
                <ContentCard
                  key={item.id + ''}
                  title={item['original_title']}
                  img={item['poster_path']}
                  rating={item['vote_average']}
                  date={item['release_date'].slice(0, 4)}
                  typeContent="movies"
                  featured={true}
                  id={item.id}
                />
              )
            )}
          {featuredTvSeries &&
            featuredTvSeries.map(
              (item): ReactNode => (
                <ContentCard
                  key={item.id + ''}
                  title={item['original_name']}
                  img={item['poster_path']}
                  rating={item['vote_average']}
                  date={item['first_air_date'].slice(0, 4)}
                  typeContent="tvseries"
                  featured={true}
                  id={item.id}
                />
              )
            )}
        </ul>
      </div>

      <div className="w-full border-b-[1px] border-b-secondaryGrey mb-5 pb-3">
        <span className="px-3 py-1 flex justify-between items-center w-full text-xl text-slate-200 border-l-[3px] border-l-primaryRed">
          <h1>MOVIES</h1>
          <span className="py-1 px-2  bg-primaryRed text-xs rounded-sm cursor-pointer hover:brightness-95">
            SEE ALL
          </span>
        </span>
        <ul className="grid grid-cols-3 gap-3 mt-6 md:grid-cols-4 lg:grid-cols-6 lg:gap-7">
          {filteredPopularMovies &&
            filteredPopularMovies.map(
              (item): ReactNode => (
                <ContentCard
                  key={item.id + ''}
                  title={item['original_title']}
                  img={item['poster_path']}
                  rating={item['vote_average']}
                  date={item['release_date'].slice(0, 4)}
                  typeContent="movies"
                  featured={false}
                  id={item.id}
                />
              )
            )}
        </ul>
      </div>

      <div className="w-full pb-3">
        <span className="px-3 py-1 w-full flex items-center justify-between text-xl text-slate-200 border-l-[3px] border-l-primaryRed">
          <h2>TV SERIES</h2>
          <span className="py-1 px-2  bg-primaryRed text-xs rounded-sm cursor-pointer hover:brightness-95">
            SEE ALL
          </span>
        </span>
        <ul className="grid grid-cols-3 gap-3 mt-6 md:grid-cols-4 lg:grid-cols-6 lg:gap-7">
          {filteredPopularTvSeries &&
            filteredPopularTvSeries.map(
              (item): ReactNode => (
                <ContentCard
                  key={item.id + ''}
                  title={item['original_name']}
                  img={item.poster_path}
                  rating={item['vote_average']}
                  date={item['first_air_date'].slice(0, 4)}
                  typeContent="tvseries"
                  featured={false}
                  id={item.id}
                />
              )
            )}
        </ul>
      </div>
    </div>
  );
};

export default Home;
